from typing import Optional, Union


def _health_to_stars(health_score: Optional[Union[int, float, str]]) -> str:
    if health_score is None:
        return "‚Äî"
    try:
        value = int(round(float(health_score)))
        value = max(1, min(value, 5))
        return "‚≠êÔ∏è" * value
    except Exception:
        return str(health_score)


def format_reply(
    dish: str,
    portion: Optional[str],
    calories: Optional[int],
    health_score: Optional[Union[int, float, str]],
    recommendation: str,
    remaining: Optional[int],
    motivation: str,
) -> str:
    cal_str = f"{calories} –∫–∫–∞–ª" if calories is not None else "‚Äî"
    remaining_str = f"{remaining} –∫–∫–∞–ª" if remaining is not None else "‚Äî"
    stars = _health_to_stars(health_score)

    lines = [
        f"{dish}",
        "",
        f"üçΩÔ∏è –ü–æ—Ä—Ü–∏—è: {portion or '‚Äî'}",
        f"üî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {cal_str}",
        "",
        f"–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑—ã: {stars}",
        "",
        f"üí°{recommendation}",
        "",
        f"üí¨ {motivation}",
        "",
        f"‚öñÔ∏è –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –¥–µ–Ω—å: {remaining_str}",
    ]
    return "\n".join(lines)


def format_daily_summary(
    date_str: str,
    items: list[tuple[str, Optional[str], Optional[int]]],
    total_calories: int,
    target: Optional[int],
) -> str:
    header = [
        f"üìÖ –ò—Ç–æ–≥–∏ –¥–Ω—è ‚Äî {date_str}",
        "",
    ]

    if items:
        lines = ["üçΩÔ∏è –°—ä–µ–¥–µ–Ω–æ:"]
        for dish, portion, cal in items:
            portion_txt = f" ¬∑ {portion}" if portion else ""
            cal_txt = f" ‚Äî {cal} –∫–∫–∞–ª" if cal is not None else ""
            lines.append(f"‚Ä¢ {dish}{portion_txt}{cal_txt}")
    else:
        lines = ["üçΩÔ∏è –ó–∞ –¥–µ–Ω—å –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ"]

    totals = [
        "",
        f"üî• –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_calories} –∫–∫–∞–ª",
    ]

    footer: list[str] = []
    if isinstance(target, int):
        delta = target - total_calories
        if delta >= 0:
            footer.append(f"‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–µ–ª–∏: –æ—Å—Ç–∞–ª–æ—Å—å {delta} –∫–∫–∞–ª")
            footer.append("üëè –û—Ç–ª–∏—á–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –∏–¥–µ–∞–ª—å–Ω–æ—Å—Ç–∏.")
        else:
            footer.append(f"‚ö†Ô∏è –ü–µ—Ä–µ–±–æ—Ä –Ω–∞ {abs(delta)} –∫–∫–∞–ª")
            footer.append("üí™ –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–π —Å–µ–≥–æ–¥–Ω—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é, –∞ –∑–∞–≤—Ç—Ä–∞ –¥–æ–±–∞–≤—å –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ –ª—ë–≥–∫–∏—Ö –±–ª—é–¥.")
    else:
        footer.append("‚ÑπÔ∏è –¶–µ–ª—å –Ω–∞ –¥–µ–Ω—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–∫–∞–∂–∏ —á–µ—Ä–µ–∑ /target")

    return "\n".join(header + lines + totals + [""] + footer) 